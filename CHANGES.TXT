/*
 * Copyright (c) 2019 by Adequate Systems, LLC.  All Rights Reserved.
 * See LICENSE.PDF   **** NO WARRANTY ****
 *
 */
Patch Level 34
added FPGA-Resistant Algorithm
  -Extensible High-Memory Algo v24()
added Multi-Destination Transactions
  -Scales up high volume third-party payment systems.
added security fixes and networking tweaks
 
 
 
Patch Level 33 (Mochimo Version 2.3)

added Pseudoblocks for mid-block difficulty adjustment
  -Impossible for blocks to exceed 15m49s after v2.3
added security fixes to MROOT creation
  -Removes certain spoofing attack vectors
added support for ZERO-tag OP_BAL Requests
  -Allows address lookup and balance query without TAG
  -Allows wallet recovery from seed phrase
added TXCLEAN Queue Re-validation following block updates
  -Prevents known cornercase block validation failures
  -Prevents all attack vectors involving poisoned TXs in the TXCLEAN queue
added low-balance pruning consensus mechanism (CAROUSEL)
  -Allows the community to clean low balances out of the ledger by consensus
  -Keeps the blockchain free of bloat, and recovers from spam attacks
added optional mining fee adjustment per miner
  -Allows future miners to create a mining fee market after mining rewards are gone
added TFILE PoPOW Chain in OP_FOUND
  -Allows nodes to definitively confirm an advertising node really solved a block
added Watchdog timer to restart and resync if no blocks solved or updated in 30 minutes +/- 10 minutes
  -Prevents Block of Death, Stuck at 0x0 events caused by temporary internet outage for nodes
  -Allows nodes to dynamically recover from any number of possible failure cases
added Upload Bandwidth limit (default = 5MB/s Upload, user configurable)
  -Prevents certain kinds of spam attacks against nodes
added NOMINER feature, initialized with -n at runtime
  -Allows a node to run in relay mode only without mining blocks
added command line compile options for CPU or GPU, merging both development branches
  -Involed with ./makeunx bin -DCPU  -or-  ./makeunx bin -DCUDA
replaced inbound TX uniqueness test (CRC) with address-based validation
  -Allows the system to scale past 65,536 TXs per block at some indeterminate future date

Patch Level 32 (Mochimo Version 2.2)

added support for diverse nVidia GPU Models
CUDA Code optimizations for average HP/s +10-20%
improved sanity checking in get_eon (prep for ring signatures)
added OPCODE 15 & 16 (pull candidate / push solved blocks)
added support for Headless Miners and Mining Pools
adjusted wait time up to 300 seconds from 180 if no quorum found
fixed random seed issue in rand.c
added node capability bits to identify server capabilities during handshake
added new execute and dispatch functions for handling headless miner requests
added new reaping function for terminating stale child processes related to headless miners
various community requested patches


Patch Level 31 (Mochimo Version 2.0)

October 27th, 2018

CHANGELOG

added new open source license
removed default maddr.dat
update system version number to 2
added trigger block for new weight calculation as 17185 (0x4321)
added trigger block for new reward calculation as 17185 (0x4321)
added trigger block for new difficulty calculation as 17185 (0x4321)
added trigger block for tag system validation checks as 17185 (0x4321)
added dynamic start nodes list download from mochimap.net
added tag.c, tag related fixes throughout
updated default coreip.lst
reorganized source code distro in prep for Github
removed txq1.lck (process_tx() is now synchronous)
added wallet Build 31 with tag support
Adjusted TXVAL to insist src addresses must fully spent
Enabled balance forwarding to change address
bup.c: patch a bunch of stuff
bup.c: balances debit '-' first, then credit 'A'.
bval.c: trancodes: '-' and 'A'.
bval.c: enforces no tag on bh.maddr.
bval.c: tag mods
bval.c: and init.c: permanent future time fix.
bupdata.c: new set_difficulty() with preset trigger.
bupdata.c: new set_difficulty() block trigger = 16383
gomochi: sleep set to 1 second.
gomochi: added dynamic startnodes.lst download
init.c: new add_weight() improved block weight fork on block trigger
init.c: new add_weight() -DNEWWEIGHT forks chain on block trigger
init.c: get_eon(): timeout set to 180.
init.c: modified read_coreipl() and init_coreipl().
data.c: #define CORELISTLEN 16
gettx.c: added contention(), catchup(), and bval2()
server.c: removed LULL timer
txclean.c: fixed unlink(argv[1]) bug.
util.c: new get_mreward() on block trigger
